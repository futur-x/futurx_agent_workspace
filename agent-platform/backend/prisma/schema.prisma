// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String   // Hashed password
  role      String   @default("user") // "admin" or "user"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions    Session[]
  generations Generation[]
  uploads     Upload[]

  @@index([username])
  @@index([role])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@index([userId])
}

model Agent {
  id        String   @id @default(uuid())
  name      String
  url       String
  apiToken  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  generations Generation[]

  @@index([isActive])
}

model Task {
  id             String   @id @default(uuid())
  name           String
  promptTemplate String
  placeholders   String   // JSON array of placeholder names
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  generations Generation[]

  @@index([name])
}

model Generation {
  id           String   @id @default(uuid())
  userId       String
  agentId      String
  taskId       String
  inputText    String?
  fileName     String?
  fileContent  String?
  outputContent String
  duration     Int      // in seconds
  status       String   // 'completed', 'failed', 'timeout'
  error        String?
  createdAt    DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([agentId])
  @@index([taskId])
  @@index([status])
  @@index([createdAt])
}

model Upload {
  id        String   @id @default(uuid())
  userId    String
  fileName  String
  mimeType  String
  size      Int
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}